{"ast":null,"code":"// --- SAHTE VERİTABANI (LOCALSTORAGE) ---\n\n// Uygulama ilk kez çalıştığında varsayılan verileri oluştur\nconst initializeData = () => {\n  // Kullanıcılar\n  if (!localStorage.getItem('users')) {\n    const users = [{\n      id: 1,\n      name: 'Admin User',\n      email: 'admin@test.com',\n      password: '123',\n      role: 'admin',\n      myCourses: []\n    }, {\n      id: 2,\n      name: 'Normal User',\n      email: 'user@test.com',\n      password: '123',\n      role: 'user',\n      myCourses: [1]\n    }];\n    localStorage.setItem('users', JSON.stringify(users));\n  }\n\n  // Kurslar\n  if (!localStorage.getItem('courses')) {\n    const courses = [{\n      id: 1,\n      title: 'Web Geliştirme Temelleri',\n      description: 'HTML, CSS ve JavaScript ile modern web siteleri oluşturun.',\n      instructor: 'Ahmet Yılmaz'\n    }, {\n      id: 2,\n      title: 'React ile Frontend',\n      description: 'Popüler JavaScript kütüphanesi React ile dinamik arayüzler geliştirin.',\n      instructor: 'Ayşe Kaya'\n    }, {\n      id: 3,\n      title: 'Python Programlama',\n      description: 'Veri bilimi ve yapay zeka için en popüler dil olan Python\\'ı öğrenin.',\n      instructor: 'Mehmet Demir'\n    }];\n    localStorage.setItem('courses', JSON.stringify(courses));\n  }\n};\ninitializeData();\n\n// --- API FONKSİYONLARI ---\n\nexport const api = {\n  login: (email, password) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const users = JSON.parse(localStorage.getItem('users'));\n        const user = users.find(u => u.email === email && u.password === password);\n        if (user) {\n          // Şifreyi gönderme, güvenlik için\n          const {\n            password,\n            ...userToReturn\n          } = user;\n          resolve(userToReturn);\n        } else {\n          reject(new Error('E-posta veya şifre hatalı.'));\n        }\n      }, 500);\n    });\n  },\n  register: (name, email, password) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let users = JSON.parse(localStorage.getItem('users'));\n        if (users.some(u => u.email === email)) {\n          return reject(new Error('Bu e-posta adresi zaten kullanılıyor.'));\n        }\n        const newUser = {\n          id: Date.now(),\n          // Basit bir benzersiz ID\n          name,\n          email,\n          password,\n          role: 'user',\n          myCourses: []\n        };\n        users.push(newUser);\n        localStorage.setItem('users', JSON.stringify(users));\n        const {\n          password: pw,\n          ...userToReturn\n        } = newUser;\n        resolve(userToReturn);\n      }, 500);\n    });\n  },\n  getCourses: () => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const courses = JSON.parse(localStorage.getItem('courses'));\n        resolve(courses);\n      }, 300);\n    });\n  },\n  addCourse: courseData => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let courses = JSON.parse(localStorage.getItem('courses'));\n        const newCourse = {\n          id: Date.now(),\n          ...courseData\n        };\n        courses.push(newCourse);\n        localStorage.setItem('courses', JSON.stringify(courses));\n        resolve(newCourse);\n      }, 500);\n    });\n  },\n  enrollInCourse: (userId, courseId) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let users = JSON.parse(localStorage.getItem('users'));\n        const userIndex = users.findIndex(u => u.id === userId);\n        if (userIndex !== -1) {\n          if (!users[userIndex].myCourses.includes(courseId)) {\n            users[userIndex].myCourses.push(courseId);\n            localStorage.setItem('users', JSON.stringify(users));\n            resolve(users[userIndex]);\n          } else {\n            reject(new Error('Bu kursa zaten kayıtlısınız.'));\n          }\n        } else {\n          reject(new Error('Kullanıcı bulunamadı.'));\n        }\n      }, 500);\n    });\n  },\n  unenrollFromCourse: (userId, courseId) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let users = JSON.parse(localStorage.getItem('users'));\n        const userIndex = users.findIndex(u => u.id === userId);\n        if (userIndex !== -1) {\n          // Kullanıcının kurs listesinden ilgili kurs ID'sini filtrele\n          users[userIndex].myCourses = users[userIndex].myCourses.filter(id => id !== courseId);\n          localStorage.setItem('users', JSON.stringify(users));\n\n          // Güncellenmiş kullanıcı bilgisini döndür\n          const {\n            password,\n            ...updatedUser\n          } = users[userIndex];\n          resolve(updatedUser);\n        } else {\n          reject(new Error('Kullanıcı bulunamadı.'));\n        }\n      }, 500);\n    });\n  },\n  deleteCourse: courseId => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let courses = JSON.parse(localStorage.getItem('courses'));\n        // Verilen ID'ye sahip olmayan kursları tutarak yeni bir dizi oluştur\n        const updatedCourses = courses.filter(c => c.id !== courseId);\n        localStorage.setItem('courses', JSON.stringify(updatedCourses));\n\n        // Önemli: Kurs silindiğinde, kullanıcıların 'myCourses' listesinden de\n        // bu ID'yi temizlemek gerekir. Bu basit örnekte bu adımı atlıyoruz\n        // ancak gerçek bir uygulamada bu yapılmalıdır.\n\n        resolve({\n          success: true,\n          courseId\n        });\n      }, 500);\n    });\n  },\n  getUserCourses: userId => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const users = JSON.parse(localStorage.getItem('users'));\n        const courses = JSON.parse(localStorage.getItem('courses'));\n        const user = users.find(u => u.id === userId);\n        if (user) {\n          const userCourses = user.myCourses.map(courseId => courses.find(c => c.id === courseId)).filter(course => course !== undefined); // Silinmiş kursları filtrele\n          resolve(userCourses);\n        } else {\n          reject(new Error('Kullanıcı bulunamadı.'));\n        }\n      }, 300);\n    });\n  }\n};","map":{"version":3,"names":["initializeData","localStorage","getItem","users","id","name","email","password","role","myCourses","setItem","JSON","stringify","courses","title","description","instructor","api","login","Promise","resolve","reject","setTimeout","parse","user","find","u","userToReturn","Error","register","some","newUser","Date","now","push","pw","getCourses","addCourse","courseData","newCourse","enrollInCourse","userId","courseId","userIndex","findIndex","includes","unenrollFromCourse","filter","updatedUser","deleteCourse","updatedCourses","c","success","getUserCourses","userCourses","map","course","undefined"],"sources":["C:/Users/ziqxc/belediye-kurslari/src/services/api.js"],"sourcesContent":["// --- SAHTE VERİTABANI (LOCALSTORAGE) ---\r\n\r\n// Uygulama ilk kez çalıştığında varsayılan verileri oluştur\r\nconst initializeData = () => {\r\n  // Kullanıcılar\r\n  if (!localStorage.getItem('users')) {\r\n    const users = [\r\n      { id: 1, name: 'Admin User', email: 'admin@test.com', password: '123', role: 'admin', myCourses: [] },\r\n      { id: 2, name: 'Normal User', email: 'user@test.com', password: '123', role: 'user', myCourses: [1] },\r\n    ];\r\n    localStorage.setItem('users', JSON.stringify(users));\r\n  }\r\n\r\n  // Kurslar\r\n  if (!localStorage.getItem('courses')) {\r\n    const courses = [\r\n      { id: 1, title: 'Web Geliştirme Temelleri', description: 'HTML, CSS ve JavaScript ile modern web siteleri oluşturun.', instructor: 'Ahmet Yılmaz' },\r\n      { id: 2, title: 'React ile Frontend', description: 'Popüler JavaScript kütüphanesi React ile dinamik arayüzler geliştirin.', instructor: 'Ayşe Kaya' },\r\n      { id: 3, title: 'Python Programlama', description: 'Veri bilimi ve yapay zeka için en popüler dil olan Python\\'ı öğrenin.', instructor: 'Mehmet Demir' },\r\n    ];\r\n    localStorage.setItem('courses', JSON.stringify(courses));\r\n  }\r\n};\r\n\r\ninitializeData();\r\n\r\n// --- API FONKSİYONLARI ---\r\n\r\nexport const api = {\r\n  login: (email, password) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        const users = JSON.parse(localStorage.getItem('users'));\r\n        const user = users.find(u => u.email === email && u.password === password);\r\n        if (user) {\r\n          // Şifreyi gönderme, güvenlik için\r\n          const { password, ...userToReturn } = user;\r\n          resolve(userToReturn);\r\n        } else {\r\n          reject(new Error('E-posta veya şifre hatalı.'));\r\n        }\r\n      }, 500);\r\n    });\r\n  },\r\n\r\n  register: (name, email, password) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        let users = JSON.parse(localStorage.getItem('users'));\r\n        if (users.some(u => u.email === email)) {\r\n          return reject(new Error('Bu e-posta adresi zaten kullanılıyor.'));\r\n        }\r\n        const newUser = {\r\n          id: Date.now(), // Basit bir benzersiz ID\r\n          name,\r\n          email,\r\n          password,\r\n          role: 'user',\r\n          myCourses: []\r\n        };\r\n        users.push(newUser);\r\n        localStorage.setItem('users', JSON.stringify(users));\r\n        const { password: pw, ...userToReturn } = newUser;\r\n        resolve(userToReturn);\r\n      }, 500);\r\n    });\r\n  },\r\n\r\n  getCourses: () => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const courses = JSON.parse(localStorage.getItem('courses'));\r\n        resolve(courses);\r\n      }, 300);\r\n    });\r\n  },\r\n\r\n  addCourse: (courseData) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        let courses = JSON.parse(localStorage.getItem('courses'));\r\n        const newCourse = {\r\n          id: Date.now(),\r\n          ...courseData\r\n        };\r\n        courses.push(newCourse);\r\n        localStorage.setItem('courses', JSON.stringify(courses));\r\n        resolve(newCourse);\r\n      }, 500);\r\n    });\r\n  },\r\n\r\n  enrollInCourse: (userId, courseId) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        let users = JSON.parse(localStorage.getItem('users'));\r\n        const userIndex = users.findIndex(u => u.id === userId);\r\n        if (userIndex !== -1) {\r\n          if (!users[userIndex].myCourses.includes(courseId)) {\r\n            users[userIndex].myCourses.push(courseId);\r\n            localStorage.setItem('users', JSON.stringify(users));\r\n            resolve(users[userIndex]);\r\n          } else {\r\n            reject(new Error('Bu kursa zaten kayıtlısınız.'));\r\n          }\r\n        } else {\r\n          reject(new Error('Kullanıcı bulunamadı.'));\r\n        }\r\n      }, 500);\r\n    });\r\n  },\r\n  unenrollFromCourse: (userId, courseId) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        let users = JSON.parse(localStorage.getItem('users'));\r\n        const userIndex = users.findIndex(u => u.id === userId);\r\n\r\n        if (userIndex !== -1) {\r\n          // Kullanıcının kurs listesinden ilgili kurs ID'sini filtrele\r\n          users[userIndex].myCourses = users[userIndex].myCourses.filter(id => id !== courseId);\r\n          localStorage.setItem('users', JSON.stringify(users));\r\n\r\n          // Güncellenmiş kullanıcı bilgisini döndür\r\n          const { password, ...updatedUser } = users[userIndex];\r\n          resolve(updatedUser);\r\n        } else {\r\n          reject(new Error('Kullanıcı bulunamadı.'));\r\n        }\r\n      }, 500);\r\n    });\r\n  },\r\ndeleteCourse: (courseId) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        let courses = JSON.parse(localStorage.getItem('courses'));\r\n        // Verilen ID'ye sahip olmayan kursları tutarak yeni bir dizi oluştur\r\n        const updatedCourses = courses.filter(c => c.id !== courseId);\r\n        localStorage.setItem('courses', JSON.stringify(updatedCourses));\r\n        \r\n        // Önemli: Kurs silindiğinde, kullanıcıların 'myCourses' listesinden de\r\n        // bu ID'yi temizlemek gerekir. Bu basit örnekte bu adımı atlıyoruz\r\n        // ancak gerçek bir uygulamada bu yapılmalıdır.\r\n\r\n        resolve({ success: true, courseId });\r\n      }, 500);\r\n    });\r\n  },\r\n\r\n  getUserCourses: (userId) => {\r\n    return new Promise((resolve, reject) => {\r\n       setTimeout(() => {\r\n        const users = JSON.parse(localStorage.getItem('users'));\r\n        const courses = JSON.parse(localStorage.getItem('courses'));\r\n        const user = users.find(u => u.id === userId);\r\n        \r\n        if (user) {\r\n          const userCourses = user.myCourses.map(courseId => \r\n            courses.find(c => c.id === courseId)\r\n          ).filter(course => course !== undefined); // Silinmiş kursları filtrele\r\n          resolve(userCourses);\r\n        } else {\r\n          reject(new Error('Kullanıcı bulunamadı.'));\r\n        }\r\n       }, 300);\r\n       \r\n    });  \r\n  },\r\n};"],"mappings":"AAAA;;AAEA;AACA,MAAMA,cAAc,GAAGA,CAAA,KAAM;EAC3B;EACA,IAAI,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;IAClC,MAAMC,KAAK,GAAG,CACZ;MAAEC,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,YAAY;MAAEC,KAAK,EAAE,gBAAgB;MAAEC,QAAQ,EAAE,KAAK;MAAEC,IAAI,EAAE,OAAO;MAAEC,SAAS,EAAE;IAAG,CAAC,EACrG;MAAEL,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,aAAa;MAAEC,KAAK,EAAE,eAAe;MAAEC,QAAQ,EAAE,KAAK;MAAEC,IAAI,EAAE,MAAM;MAAEC,SAAS,EAAE,CAAC,CAAC;IAAE,CAAC,CACtG;IACDR,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACT,KAAK,CAAC,CAAC;EACtD;;EAEA;EACA,IAAI,CAACF,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,EAAE;IACpC,MAAMW,OAAO,GAAG,CACd;MAAET,EAAE,EAAE,CAAC;MAAEU,KAAK,EAAE,0BAA0B;MAAEC,WAAW,EAAE,4DAA4D;MAAEC,UAAU,EAAE;IAAe,CAAC,EACnJ;MAAEZ,EAAE,EAAE,CAAC;MAAEU,KAAK,EAAE,oBAAoB;MAAEC,WAAW,EAAE,wEAAwE;MAAEC,UAAU,EAAE;IAAY,CAAC,EACtJ;MAAEZ,EAAE,EAAE,CAAC;MAAEU,KAAK,EAAE,oBAAoB;MAAEC,WAAW,EAAE,uEAAuE;MAAEC,UAAU,EAAE;IAAe,CAAC,CACzJ;IACDf,YAAY,CAACS,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACC,OAAO,CAAC,CAAC;EAC1D;AACF,CAAC;AAEDb,cAAc,CAAC,CAAC;;AAEhB;;AAEA,OAAO,MAAMiB,GAAG,GAAG;EACjBC,KAAK,EAAEA,CAACZ,KAAK,EAAEC,QAAQ,KAAK;IAC1B,OAAO,IAAIY,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtCC,UAAU,CAAC,MAAM;QACf,MAAMnB,KAAK,GAAGQ,IAAI,CAACY,KAAK,CAACtB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;QACvD,MAAMsB,IAAI,GAAGrB,KAAK,CAACsB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACpB,KAAK,KAAKA,KAAK,IAAIoB,CAAC,CAACnB,QAAQ,KAAKA,QAAQ,CAAC;QAC1E,IAAIiB,IAAI,EAAE;UACR;UACA,MAAM;YAAEjB,QAAQ;YAAE,GAAGoB;UAAa,CAAC,GAAGH,IAAI;UAC1CJ,OAAO,CAACO,YAAY,CAAC;QACvB,CAAC,MAAM;UACLN,MAAM,CAAC,IAAIO,KAAK,CAAC,4BAA4B,CAAC,CAAC;QACjD;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ,CAAC;EAEDC,QAAQ,EAAEA,CAACxB,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;IACnC,OAAO,IAAIY,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtCC,UAAU,CAAC,MAAM;QACf,IAAInB,KAAK,GAAGQ,IAAI,CAACY,KAAK,CAACtB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;QACrD,IAAIC,KAAK,CAAC2B,IAAI,CAACJ,CAAC,IAAIA,CAAC,CAACpB,KAAK,KAAKA,KAAK,CAAC,EAAE;UACtC,OAAOe,MAAM,CAAC,IAAIO,KAAK,CAAC,uCAAuC,CAAC,CAAC;QACnE;QACA,MAAMG,OAAO,GAAG;UACd3B,EAAE,EAAE4B,IAAI,CAACC,GAAG,CAAC,CAAC;UAAE;UAChB5B,IAAI;UACJC,KAAK;UACLC,QAAQ;UACRC,IAAI,EAAE,MAAM;UACZC,SAAS,EAAE;QACb,CAAC;QACDN,KAAK,CAAC+B,IAAI,CAACH,OAAO,CAAC;QACnB9B,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACT,KAAK,CAAC,CAAC;QACpD,MAAM;UAAEI,QAAQ,EAAE4B,EAAE;UAAE,GAAGR;QAAa,CAAC,GAAGI,OAAO;QACjDX,OAAO,CAACO,YAAY,CAAC;MACvB,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ,CAAC;EAEDS,UAAU,EAAEA,CAAA,KAAM;IAChB,OAAO,IAAIjB,OAAO,CAAEC,OAAO,IAAK;MAC9BE,UAAU,CAAC,MAAM;QACf,MAAMT,OAAO,GAAGF,IAAI,CAACY,KAAK,CAACtB,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;QAC3DkB,OAAO,CAACP,OAAO,CAAC;MAClB,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ,CAAC;EAEDwB,SAAS,EAAGC,UAAU,IAAK;IACzB,OAAO,IAAInB,OAAO,CAAEC,OAAO,IAAK;MAC9BE,UAAU,CAAC,MAAM;QACf,IAAIT,OAAO,GAAGF,IAAI,CAACY,KAAK,CAACtB,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;QACzD,MAAMqC,SAAS,GAAG;UAChBnC,EAAE,EAAE4B,IAAI,CAACC,GAAG,CAAC,CAAC;UACd,GAAGK;QACL,CAAC;QACDzB,OAAO,CAACqB,IAAI,CAACK,SAAS,CAAC;QACvBtC,YAAY,CAACS,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACC,OAAO,CAAC,CAAC;QACxDO,OAAO,CAACmB,SAAS,CAAC;MACpB,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ,CAAC;EAEDC,cAAc,EAAEA,CAACC,MAAM,EAAEC,QAAQ,KAAK;IACpC,OAAO,IAAIvB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtCC,UAAU,CAAC,MAAM;QACf,IAAInB,KAAK,GAAGQ,IAAI,CAACY,KAAK,CAACtB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;QACrD,MAAMyC,SAAS,GAAGxC,KAAK,CAACyC,SAAS,CAAClB,CAAC,IAAIA,CAAC,CAACtB,EAAE,KAAKqC,MAAM,CAAC;QACvD,IAAIE,SAAS,KAAK,CAAC,CAAC,EAAE;UACpB,IAAI,CAACxC,KAAK,CAACwC,SAAS,CAAC,CAAClC,SAAS,CAACoC,QAAQ,CAACH,QAAQ,CAAC,EAAE;YAClDvC,KAAK,CAACwC,SAAS,CAAC,CAAClC,SAAS,CAACyB,IAAI,CAACQ,QAAQ,CAAC;YACzCzC,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACT,KAAK,CAAC,CAAC;YACpDiB,OAAO,CAACjB,KAAK,CAACwC,SAAS,CAAC,CAAC;UAC3B,CAAC,MAAM;YACLtB,MAAM,CAAC,IAAIO,KAAK,CAAC,8BAA8B,CAAC,CAAC;UACnD;QACF,CAAC,MAAM;UACLP,MAAM,CAAC,IAAIO,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC5C;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ,CAAC;EACDkB,kBAAkB,EAAEA,CAACL,MAAM,EAAEC,QAAQ,KAAK;IACxC,OAAO,IAAIvB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtCC,UAAU,CAAC,MAAM;QACf,IAAInB,KAAK,GAAGQ,IAAI,CAACY,KAAK,CAACtB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;QACrD,MAAMyC,SAAS,GAAGxC,KAAK,CAACyC,SAAS,CAAClB,CAAC,IAAIA,CAAC,CAACtB,EAAE,KAAKqC,MAAM,CAAC;QAEvD,IAAIE,SAAS,KAAK,CAAC,CAAC,EAAE;UACpB;UACAxC,KAAK,CAACwC,SAAS,CAAC,CAAClC,SAAS,GAAGN,KAAK,CAACwC,SAAS,CAAC,CAAClC,SAAS,CAACsC,MAAM,CAAC3C,EAAE,IAAIA,EAAE,KAAKsC,QAAQ,CAAC;UACrFzC,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACT,KAAK,CAAC,CAAC;;UAEpD;UACA,MAAM;YAAEI,QAAQ;YAAE,GAAGyC;UAAY,CAAC,GAAG7C,KAAK,CAACwC,SAAS,CAAC;UACrDvB,OAAO,CAAC4B,WAAW,CAAC;QACtB,CAAC,MAAM;UACL3B,MAAM,CAAC,IAAIO,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC5C;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ,CAAC;EACHqB,YAAY,EAAGP,QAAQ,IAAK;IACxB,OAAO,IAAIvB,OAAO,CAAEC,OAAO,IAAK;MAC9BE,UAAU,CAAC,MAAM;QACf,IAAIT,OAAO,GAAGF,IAAI,CAACY,KAAK,CAACtB,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;QACzD;QACA,MAAMgD,cAAc,GAAGrC,OAAO,CAACkC,MAAM,CAACI,CAAC,IAAIA,CAAC,CAAC/C,EAAE,KAAKsC,QAAQ,CAAC;QAC7DzC,YAAY,CAACS,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACsC,cAAc,CAAC,CAAC;;QAE/D;QACA;QACA;;QAEA9B,OAAO,CAAC;UAAEgC,OAAO,EAAE,IAAI;UAAEV;QAAS,CAAC,CAAC;MACtC,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ,CAAC;EAEDW,cAAc,EAAGZ,MAAM,IAAK;IAC1B,OAAO,IAAItB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACrCC,UAAU,CAAC,MAAM;QAChB,MAAMnB,KAAK,GAAGQ,IAAI,CAACY,KAAK,CAACtB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;QACvD,MAAMW,OAAO,GAAGF,IAAI,CAACY,KAAK,CAACtB,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;QAC3D,MAAMsB,IAAI,GAAGrB,KAAK,CAACsB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACtB,EAAE,KAAKqC,MAAM,CAAC;QAE7C,IAAIjB,IAAI,EAAE;UACR,MAAM8B,WAAW,GAAG9B,IAAI,CAACf,SAAS,CAAC8C,GAAG,CAACb,QAAQ,IAC7C7B,OAAO,CAACY,IAAI,CAAC0B,CAAC,IAAIA,CAAC,CAAC/C,EAAE,KAAKsC,QAAQ,CACrC,CAAC,CAACK,MAAM,CAACS,MAAM,IAAIA,MAAM,KAAKC,SAAS,CAAC,CAAC,CAAC;UAC1CrC,OAAO,CAACkC,WAAW,CAAC;QACtB,CAAC,MAAM;UACLjC,MAAM,CAAC,IAAIO,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC5C;MACD,CAAC,EAAE,GAAG,CAAC;IAEV,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}