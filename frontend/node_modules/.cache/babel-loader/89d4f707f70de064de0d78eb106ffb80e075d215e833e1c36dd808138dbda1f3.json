{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL;\nexport const fetchAPI = async (endpoint, method = \"GET\", body = null) => {\n  // Tarayıcı hafızasından token'ı al\n  const token = localStorage.getItem(\"authToken\");\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\"\n  };\n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  const config = {\n    method,\n    headers\n  };\n  if (body) {\n    config.body = JSON.stringify(body);\n  }\n  try {\n    const response = await fetch(`${API_URL}${endpoint}`, config);\n    const data = await response.json();\n    if (!response.ok) {\n      // Backend'den gelen detaylı hata mesajını yakala ve fırlat\n      const errorMessage = data.message || (data.errors ? Object.values(data.errors).flat().join(\" \") : \"Bir hata oluştu.\");\n      throw new Error(errorMessage);\n    }\n    return data; // Başarılı olursa, veriyi döndür\n  } catch (error) {\n    console.error(`API çağrısı hatası: ${method} ${endpoint}`, error);\n    // Hata mesajını tekrar fırlatarak çağıran bileşenin yakalamasını sağla\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","fetchAPI","endpoint","method","body","token","localStorage","getItem","headers","Accept","config","JSON","stringify","response","fetch","data","json","ok","errorMessage","message","errors","Object","values","flat","join","Error","error","console"],"sources":["C:/Users/ziqxc/OneDrive/Documents/GitHub/Kurs-kayit/Kurs-kayit/frontend/src/utils/api.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL;\r\n\r\nexport const fetchAPI = async (endpoint, method = \"GET\", body = null) => {\r\n  // Tarayıcı hafızasından token'ı al\r\n  const token = localStorage.getItem(\"authToken\");\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Accept: \"application/json\",\r\n  };\r\n\r\n  if (token) {\r\n    headers[\"Authorization\"] = `Bearer ${token}`;\r\n  }\r\n\r\n  const config = {\r\n    method,\r\n    headers,\r\n  };\r\n\r\n  if (body) {\r\n    config.body = JSON.stringify(body);\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(`${API_URL}${endpoint}`, config);\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      // Backend'den gelen detaylı hata mesajını yakala ve fırlat\r\n      const errorMessage =\r\n        data.message ||\r\n        (data.errors\r\n          ? Object.values(data.errors).flat().join(\" \")\r\n          : \"Bir hata oluştu.\");\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return data; // Başarılı olursa, veriyi döndür\r\n  } catch (error) {\r\n    console.error(`API çağrısı hatası: ${method} ${endpoint}`, error);\r\n    // Hata mesajını tekrar fırlatarak çağıran bileşenin yakalamasını sağla\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,KAAK;EACvE;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAE/C,MAAMC,OAAO,GAAG;IACd,cAAc,EAAE,kBAAkB;IAClCC,MAAM,EAAE;EACV,CAAC;EAED,IAAIJ,KAAK,EAAE;IACTG,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EAC9C;EAEA,MAAMK,MAAM,GAAG;IACbP,MAAM;IACNK;EACF,CAAC;EAED,IAAIJ,IAAI,EAAE;IACRM,MAAM,CAACN,IAAI,GAAGO,IAAI,CAACC,SAAS,CAACR,IAAI,CAAC;EACpC;EAEA,IAAI;IACF,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGjB,OAAO,GAAGK,QAAQ,EAAE,EAAEQ,MAAM,CAAC;IAC7D,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;MAChB;MACA,MAAMC,YAAY,GAChBH,IAAI,CAACI,OAAO,KACXJ,IAAI,CAACK,MAAM,GACRC,MAAM,CAACC,MAAM,CAACP,IAAI,CAACK,MAAM,CAAC,CAACG,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,GAC3C,kBAAkB,CAAC;MACzB,MAAM,IAAIC,KAAK,CAACP,YAAY,CAAC;IAC/B;IAEA,OAAOH,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuBvB,MAAM,IAAID,QAAQ,EAAE,EAAEwB,KAAK,CAAC;IACjE;IACA,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}